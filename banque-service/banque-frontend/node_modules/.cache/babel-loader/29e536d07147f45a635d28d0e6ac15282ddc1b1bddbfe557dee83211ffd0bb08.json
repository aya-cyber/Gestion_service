{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useMutation,useQuery,gql}from'@apollo/client';// GraphQL Mutation pour ajouter une transaction\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ADD_TRANSACTION=gql`\n  mutation addTransaction($transactionRequest: TransactionInput!) {\n    addTransaction(transactionRequest: $transactionRequest) {\n      id\n      montant\n      date\n      type\n      compte {\n        id\n        solde\n      }\n    }\n  }\n`;// GraphQL Query pour récupérer les comptes\nconst GET_COMPTES=gql`\n  query {\n    allComptes {\n      id\n      solde\n      dateCreation\n      type\n    }\n  }\n`;const AddTransaction=()=>{const[compteId,setCompteId]=useState('');const[montant,setMontant]=useState('');const[date,setDate]=useState('');const[type,setType]=useState('DEPOT');// 'DEPOT' par défaut\nconst{loading,error,data}=useQuery(GET_COMPTES);// Utilisation de useQuery pour récupérer les comptes\nconst[addTransaction]=useMutation(ADD_TRANSACTION);const handleSubmit=e=>{e.preventDefault();// Vérifier les données avant d'envoyer la mutation\nif(!compteId||!montant||!date||!type){alert('Tous les champs doivent être remplis');return;}// Appel à la mutation GraphQL pour ajouter une transaction\naddTransaction({variables:{transactionRequest:{compteId:parseInt(compteId),// Assurez-vous de convertir les IDs\nmontant:parseFloat(montant),date:date,type:type}}}).then(response=>{console.log('Transaction ajoutée:',response.data.addTransaction);alert('Transaction ajoutée avec succès');}).catch(error=>{console.error('Erreur lors de l\\'ajout de la transaction:',error);alert('Une erreur est survenue lors de l\\'ajout de la transaction.');});};if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Chargement des comptes...\"});if(error)return/*#__PURE__*/_jsxs(\"p\",{children:[\"Erreur: \",error.message]});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Ajouter une Transaction\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Compte:\"}),/*#__PURE__*/_jsxs(\"select\",{value:compteId,onChange:e=>setCompteId(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"S\\xE9lectionner un compte\"}),data.allComptes.map(compte=>/*#__PURE__*/_jsxs(\"option\",{value:compte.id,children:[\"Compte \",compte.id,\" (\",compte.type,\" - Solde: \",compte.solde,\"\\u20AC)\"]},compte.id))]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Montant:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:montant,onChange:e=>setMontant(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Date:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:date,onChange:e=>setDate(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Type de transaction:\"}),/*#__PURE__*/_jsxs(\"select\",{value:type,onChange:e=>setType(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"DEPOT\",children:\"D\\xE9p\\xF4t\"}),/*#__PURE__*/_jsx(\"option\",{value:\"RETRAIT\",children:\"Retrait\"})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Ajouter la transaction\"})]})]});};export default AddTransaction;","map":{"version":3,"names":["React","useState","useEffect","useMutation","useQuery","gql","jsx","_jsx","jsxs","_jsxs","ADD_TRANSACTION","GET_COMPTES","AddTransaction","compteId","setCompteId","montant","setMontant","date","setDate","type","setType","loading","error","data","addTransaction","handleSubmit","e","preventDefault","alert","variables","transactionRequest","parseInt","parseFloat","then","response","console","log","catch","children","message","onSubmit","value","onChange","target","allComptes","map","compte","id","solde","step","required"],"sources":["C:/Users/h7018/Documents/banque-service/banque-service/banque-frontend/src/components/AddTransaction.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useMutation, useQuery, gql } from '@apollo/client';\r\n\r\n// GraphQL Mutation pour ajouter une transaction\r\nconst ADD_TRANSACTION = gql`\r\n  mutation addTransaction($transactionRequest: TransactionInput!) {\r\n    addTransaction(transactionRequest: $transactionRequest) {\r\n      id\r\n      montant\r\n      date\r\n      type\r\n      compte {\r\n        id\r\n        solde\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// GraphQL Query pour récupérer les comptes\r\nconst GET_COMPTES = gql`\r\n  query {\r\n    allComptes {\r\n      id\r\n      solde\r\n      dateCreation\r\n      type\r\n    }\r\n  }\r\n`;\r\n\r\nconst AddTransaction = () => {\r\n  const [compteId, setCompteId] = useState('');\r\n  const [montant, setMontant] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [type, setType] = useState('DEPOT'); // 'DEPOT' par défaut\r\n  const { loading, error, data } = useQuery(GET_COMPTES); // Utilisation de useQuery pour récupérer les comptes\r\n  const [addTransaction] = useMutation(ADD_TRANSACTION);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Vérifier les données avant d'envoyer la mutation\r\n    if (!compteId || !montant || !date || !type) {\r\n      alert('Tous les champs doivent être remplis');\r\n      return;\r\n    }\r\n\r\n    // Appel à la mutation GraphQL pour ajouter une transaction\r\n    addTransaction({\r\n      variables: {\r\n        transactionRequest: {\r\n          compteId: parseInt(compteId), // Assurez-vous de convertir les IDs\r\n          montant: parseFloat(montant),\r\n          date: date,\r\n          type: type,\r\n        },\r\n      },\r\n    })\r\n      .then((response) => {\r\n        console.log('Transaction ajoutée:', response.data.addTransaction);\r\n        alert('Transaction ajoutée avec succès');\r\n      })\r\n      .catch((error) => {\r\n        console.error('Erreur lors de l\\'ajout de la transaction:', error);\r\n        alert('Une erreur est survenue lors de l\\'ajout de la transaction.');\r\n      });\r\n  };\r\n\r\n  if (loading) return <p>Chargement des comptes...</p>;\r\n  if (error) return <p>Erreur: {error.message}</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Ajouter une Transaction</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Compte:</label>\r\n          <select value={compteId} onChange={(e) => setCompteId(e.target.value)}>\r\n            <option value=\"\">Sélectionner un compte</option>\r\n            {data.allComptes.map((compte) => (\r\n              <option key={compte.id} value={compte.id}>\r\n                Compte {compte.id} ({compte.type} - Solde: {compte.solde}€)\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div>\r\n          <label>Montant:</label>\r\n          <input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={montant}\r\n            onChange={(e) => setMontant(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Type de transaction:</label>\r\n          <select value={type} onChange={(e) => setType(e.target.value)}>\r\n            <option value=\"DEPOT\">Dépôt</option>\r\n            <option value=\"RETRAIT\">Retrait</option>\r\n          </select>\r\n        </div>\r\n\r\n        <button type=\"submit\">Ajouter la transaction</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}